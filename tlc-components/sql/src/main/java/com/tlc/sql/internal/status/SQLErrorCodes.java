package com.tlc.sql.internal.status;

import com.tlc.commons.code.ErrorCodeGroup;
import com.tlc.commons.code.ErrorCodeProvider;

public enum SQLErrorCodes implements ErrorCodeProvider
{
    DB_CONNECTION_FAILED(0x000),
    DB_DATABASE_STATUS_CHECK_FAILED(0x001),
    DB_DATABASE_STATUS_INVALID(0x002),
    DB_DATABASE_INITIALIZATION_FAILED(0x003),
    DB_DATABASE_DS_INITIALIZATION_FAILED(0x004),
    DB_SERVICE_INITIALIZATION_FAILED(0x005),

    DB_CREATE_TABLE_FAILED(0x010),
    DB_ROW_UNKNOWN_COLUMN(0x011),
    DB_PK_WRITE_RESTRICTED(0x012),
    DB_META_DATA_LOAD_FAILED(0x013),
    DB_META_DATA_POPULATE_FAILED(0x014),
    DB_ROW_INVALID_COLUMN(0x015),
    DB_ROW_UNKNOWN_TABLE(0x016),

    DB_TABLE_DROP_FAILED(0x020),
    DB_TABLE_DELETE_FAILED(0x021),
    DB_TABLE_SELECT_FAILED(0x022),
    DB_TABLE_UPDATE_FAILED(0x023),
    DB_TABLE_INSERT_FAILED(0x024),
    DB_TABLE_RELATION_NOT_FOUND(0x025),
    DB_QUERY_EXECUTION_FAILED(0x026),
    DB_QUERY_INVALID_CRITERIA_INPUT(0x027),
    DB_COMMIT_FAILED(0x028),
    DB_DO_RESULTSET_READ_FAILED(0x029),
    DB_UNKNOWN_QUERY(0x02A),
    DB_VALIDATE_PREPAREDSTATEMENT_INPUT_NOT_ORDERED(0x02B),
    DB_DDL_ACTION_FAILED(0x02C),


    DB_INVALID_COLUMN_MAX_LENGTH(0x030),
    DB_SCHEMA_INVALID_FILE(0x031),
    DB_SCHEMA_INVALID_TABLE_NAME(0x032),
    DB_SCHEMA_DUPLICATE_TABLE_NAME(0x033),
    DB_SCHEMA_INVALID_COLUMN_LIST(0x034),
    DB_SCHEMA_INVALID_PK_NAME(0x035),
    DB_SCHEMA_INVALID_COLUMN_NAME(0x036),
    DB_SCHEMA_DUPLICATE_COLUMN_NAME(0x037),
    DB_SCHEMA_INVALID_DATA_TYPE(0x038),
    DB_SCHEMA_INVALID_FK_LIST(0x039),
    DB_SCHEMA_INVALID_FK_NAME(0x03A),
    DB_SCHEMA_DUPLICATE_KEY_NAME(0x03B),
    DB_SCHEMA_UNKNOWN_TABLE(0x03C),
    DB_SCHEMA_UNKNOWN_COLUMN(0x03D),
    DB_SCHEMA_INVALID_COLUMN(0x03E),
    DB_SCHEMA_FK_COLUMN_TYPE_MISMATCH(0x03F),
    DB_INVALID_NUMERIC_PRECISION(0x3FA),
    DB_INVALID_NUMERIC_SCALE(0x3FB),
    DB_SCHEMA_FK_INVALID_CONSTRAINT(0x040),
    DB_SCHEMA_INVALID_UK_LIST(0x041),
    DB_SCHEMA_INVALID_UK_NAME(0x041),
    DB_SCHEMA_INVALID_INDEX_LIST(0x042),
    DB_SCHEMA_INVALID_INDEX_NAME(0x043),
    DB_SCHEMA_INVALID_PK_LIST(0x044),
    DB_SCHEMA_INVALID_PK_COLUMN(0x045),
    DB_SCHEMA_PK_SEQ_NOT_FOUND(0x046),
    DB_DATA_INVALID_FILE(0x047),
    DB_DATA_INVALID_PK_VALUE(0x048),
    DB_DATA_INVALID_PK_PATTERN(0x049),
    DB_DATA_PK_SEQ_NOT_FOUND(0x04A),
    DB_DATA_DUPLICATE_PK_PATTERN(0x04B),
    DB_DATA_INVALID_COLUMN_VALUE(0x04C),
    DB_DATA_INVALID_FK_COLUMN_VALUE(0x04D),
    DB_QUERY_INVALID_COLUMN(0x04E),
    DB_QUERY_INVALID_SELECT_COLUMNS(0x04F),
    DB_QUERY_INVALID_UPDATE_COLUMNS(0x050),
    DB_QUERY_INVALID_COMPARATOR(0x051),
    DB_QUERY_INVALID_LIMIT_CLAUSE(0x052),
    DB_QUERY_INVALID_DATA_TYPE(0x053),
    DB_SEQUENCE_CREATE_FAILED(0x054),
    DB_SEQUENCE_UPDATE_FAILED(0x055),
    DB_SEQUENCE_LOOKUP_FAILED(0x056),
    DB_SEQUENCE_INITIALIZE_FAILED(0x057),
    DB_DATA_PK_NOT_FOUND(0x058),
    DB_SEQUENCE_NOT_INITIALIZED(0x059),
    DB_SEQUENCE_ALREADY_INITIALIZED(0x060),
    DB_SCHEMA_RESERVED_COLUMN_NOT_ALLOWED(0x061),
    DB_SCHEMA_INVALID_UK_CONFIG(0x062),
    DB_SCHEMA_INVALID_IDX_CONFIG(0x063),
    DB_SCHEMA_INVALID_SEQUENCE_CONFIG(0x064),
    DB_SCHEMA_ORG_COLUMN_MISSING(0x065),

    DB_UPGRADE_COLUMN_DATA_TYPE_NOT_ALLOWED(0x081),
    DB_UPGRADE_PK_UPDATE_NOT_ALLOWED(0x082),

    DB_LISTENER_ADD_ACTION_FAILED(0x090),
    DB_LISTENER_UPDATE_ACTION_FAILED(0x091),
    DB_LISTENER_DELETE_ACTION_FAILED(0x092),

    BUNDLE_INVALID_META_FILE(0x94),
    BUNDLE_META_FILE_READ_ACTION_FAILED(0x95),
    BUNDLE_META_FILE_NOT_FOUND(0x96),
    BUNDLE_META_FILE_HISTORY_NOT_FOUND(0x97),
    BUNDLE_META_FILE_HISTORY_READ_ACTION_FAILED(0x98),
    BUNDLE_META_FILE_HISTORY_UPDATE_FAILED(0x99),
;
    private final int code;
    SQLErrorCodes(int localCode)
    {
        this.code = SQLErrorCodeGroup.GROUP.getConvertedCode(localCode);
    }

    @Override
    public int getCode()
    {
        return code;
    }

    private static class SQLErrorCodeGroup implements ErrorCodeGroup
    {
        private static final ErrorCodeGroup GROUP = new SQLErrorCodeGroup();
        @Override
        public int getPrefix()
        {
            return 0x10_0_0000;
        }
    }
}
